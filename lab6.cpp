class Solution {
public:
    int uniquePaths(int m, int n) {
        // Подсчет памяти:
        // - Используем одномерный вектор dp размером n.
        // - Память: O(n), так как храним только одну строку таблицы DP.

        // Асимптотика:
        // - Временная сложность: O(m * n), так как заполняем таблицу DP.
        // - Пространственная сложность: O(n), так как используем одномерный массив.

        // Инициализация вектора dp:
        // - dp[j] хранит количество путей до клетки (текущая строка, j).
        // - Изначально все элементы равны 1, так как в первой строке только один путь (вправо).
        vector<int> dp(n, 1);

        // Заполнение таблицы DP:
        // - Для каждой строки (начиная со второй) обновляем значения dp[j].
        // - dp[j] = dp[j] (количество путей сверху) + dp[j - 1] (количество путей слева).
        for (int i = 1; i < m; ++i) {
            for (int j = 1; j < n; ++j) {
                dp[j] += dp[j - 1];
            }
        }

        // Возвращаем количество путей до конечной клетки (m-1, n-1):
        // - dp[n - 1] содержит результат для последней клетки.
        return dp[n - 1];
    }
};
